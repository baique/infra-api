pipeline {
  agent {
    docker {
      image 'docker-proxy.hljzj.tech/maven:3.8.5-openjdk-17-slim'
      args '-v $ROOT/.m2:/root/.m2'
    }
  }

  environment {
      DIST_DIR = "${env.JOB_NAME}"
      BASE_IMAGE = "docker-proxy.hljzj.tech/openjdk:17-buster"
      APP_KEY = "${env.BUILD_TAG}"
      DIST_COMMAND = """
      # 设置容器ID文件路径
      CID_FILE="${env.AGENT_HOME}/.cid"

      # 如果存在旧的容器ID，先停止并删除对应容器
      if [ -f "$CID_FILE" ]; then
        OLD_CID=$(cat "$CID_FILE")
        if [ -n "$OLD_CID" ]; then
          docker stop "$OLD_CID" 2>/dev/null
          docker rm "$OLD_CID" 2>/dev/null
        fi
      fi
      docker run -dit \
                 --restart=always \
                 --name ${env.APP_KEY} \
                 -v ${env.AGENT_HOME}/${env.DIST_DIR}:/app \
                 -w /app \
                 ${env.BASE_IMAGE} \
                 java -jar app.jar \
                 > ${CID_FILE}
      """
  }

  stages {
    stage('build') {
      steps {
        sh 'mvn -DskipTests clean package'
      }
    }

    stage('publish') {
      steps {
        sh 'tar -cvf app.tar dist'
        archiveArtifacts 'app.tar'
      }
    }

    stage('deploy') {
      steps {
        sshPublisher failOnError: true, publishers: [sshPublisherDesc(configName: 'DEV', transfers: [sshTransfer(cleanRemote: false, excludes: '',execCommand: "${env.DIST_COMMAND}", execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',remoteDirectory: "${env.DIST_DIR}", remoteDirectorySDF: false, removePrefix: 'dist', sourceFiles: 'dist/**')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)]
      }
    }
  }
}